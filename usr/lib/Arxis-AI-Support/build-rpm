#!/bin/bash
# Stop script on errors
set -e

APP_NAME="arxis-ai-support"
APP_LIB_DIR="Arxis-AI-Support"

# Define source and build directories
EXEC_DIR=$(pwd)

# Compute project root reliably relative to this script and define source/build dirs
PROJECT_ROOT="$(cd "$(dirname "$0")/../../.." && pwd)"
SOURCE_DIR=$EXEC_DIR
BUILD_DIR=$HOME/rpmbuild/BUILD/$APP_NAME
SPEC_DIR=$HOME/rpmbuild/SPECS
ZIP_DIR=$HOME/rpmbuild/SOURCES
USRSOURCE="$PROJECT_ROOT"
# Local bin path under the project root
BASH_SCRIPT="$USRSOURCE/local/bin"
# Path to Functions.py inside the project tree
FUNCTIONS="$USRSOURCE/usr/lib/Arxis-AI-Support/Functions.py"
SPEC_FILE="$SPEC_DIR/$APP_NAME.spec"

if [ ! -f "$SPEC_FILE" ]; then
    # If the project contains a spec, copy it into SPECS so rpmbuild uses it
    if [ -f "$PROJECT_ROOT/$APP_NAME.spec" ]; then
        mkdir -p "$SPEC_DIR"
        cp "$PROJECT_ROOT/$APP_NAME.spec" "$SPEC_FILE"
        echo "Copied project spec to $SPEC_FILE"
    else
        echo "Error: Spec file not found at $SPEC_FILE and no project spec to copy"
        exit 1
    fi
fi

# Read the current version
CURRENT_VERSION=$(grep -E '^Version:[[:space:]]*' "$SPEC_FILE" | awk '{print $2}')
if [ -z "$CURRENT_VERSION" ]; then
    echo "Error: Unable to find Version in spec file"
    exit 1
fi

# Ensure build directory exists
mkdir -p $BUILD_DIR

# Ensure PROJECT_ROOT and BASH_SCRIPT are correct (project root under script dir)
PROJECT_ROOT="$(cd "$(dirname "$0")/../../.." && pwd)"
BASH_SCRIPT="$PROJECT_ROOT/local/bin"

# Step 1: Update DEBUG variable in the Bash script (guarded)
echo "Setting DEBUG to false in the Bash script..."
if [ -f "$BASH_SCRIPT/$APP_NAME" ]; then
    sed -i 's/^DEBUG=true/DEBUG=false/' "$BASH_SCRIPT/$APP_NAME" || true
else
    echo "Warning: $BASH_SCRIPT/$APP_NAME not found; skipping DEBUG toggle."
fi


# Increment the version
IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
MAJOR=${VERSION_PARTS[0]}
MINOR=${VERSION_PARTS[1]}
PATCH=$((VERSION_PARTS[2] + 1))
NEW_VERSION="$MAJOR.$MINOR.$PATCH"

# Update the version in the spec file
sed -i "s/^Version:.*$/Version: $NEW_VERSION/" "$SPEC_FILE"

echo "Version updated from $CURRENT_VERSION to $NEW_VERSION"

# Update version number in Functions.py
echo "Updating version number in Functions.py..."
sed -i "s/^Version_Number[[:space:]]*=[[:space:]]*\".*\"/Version_Number = \"$NEW_VERSION\"/" "$FUNCTIONS"

echo "Version updated to $NEW_VERSION in Functions.py"

# Load OPENAI_API_KEY from project root .env if present and export as ARXIS_API_KEY
PROJECT_ROOT="$(cd "$(dirname "$0")/../../.." && pwd)"
if [ -f "$PROJECT_ROOT/.env" ]; then
    # shellcheck disable=SC1090
    set -o allexport
    . "$PROJECT_ROOT/.env"
    set +o allexport
    export ARXIS_API_KEY="$OPENAI_API_KEY"
fi

# Extract the version number from the .spec file to confirm
VERSION=$(grep -E '^Version:[[:space:]]*' $SPEC_DIR/$APP_NAME.spec | awk '{print $2}')
echo "Confirmed version in spec file: $VERSION"

# Extract the version number from Functions.py to confirm
FUNC_VERSION=$(grep -E '^Version_Number[[:space:]]*=' "$FUNCTIONS" | cut -d'"' -f2)
echo "Confirmed version in Functions.py: $FUNC_VERSION"

# Step 2: Compress the PROJECT-ROOT/usr directory and include /etc/arxis-ai-support
echo "Compressing the $USRSOURCE/usr directory and including /etc/arxis-ai-support..."
if [ -d "$USRSOURCE/usr" ]; then
    sync
    TMP_DIR=$(mktemp -d)
    PKG_DIR="$TMP_DIR/$APP_NAME-$VERSION"
    mkdir -p "$PKG_DIR/usr"
    # Copy contents of the project usr/ into the package usr/ (avoid creating usr/usr)
    cp -a "$USRSOURCE/usr/." "$PKG_DIR/usr/" || true

    # Prepare etc/arxis-ai-support inside the package root so tar has <name>-<ver>/etc/...
    mkdir -p "$PKG_DIR/etc/arxis-ai-support"
    cat > "$PKG_DIR/etc/arxis-ai-support/env.sample" <<'_SAMPLE_'
# Example environment file for Arxis AI Support
# Create /etc/arxis-ai-support/env with the line below and set permissions to 600
# OPENAI_API_KEY=your_api_key_here
_SAMPLE_

    if [ -n "$ARXIS_API_KEY" ]; then
        printf '%s\n' "OPENAI_API_KEY=${ARXIS_API_KEY}" > "$PKG_DIR/etc/arxis-ai-support/env"
        chmod 0640 "$PKG_DIR/etc/arxis-ai-support/env" || true
        echo "Note: env file created for inclusion in source tarball (mode 0640)."
    else
        cat > "$PKG_DIR/etc/arxis-ai-support/env" <<'_ENV_'
# Placeholder environment file created by the package installer.
# To use Arxis AI Support, create /etc/arxis-ai-support/env with the following line and set file mode to 600:
# OPENAI_API_KEY=your_api_key_here
_ENV_
        chmod 0644 "$PKG_DIR/etc/arxis-ai-support/env" || true
    fi

    # Create one tarball that contains <name>-<version>/usr and <name>-<version>/etc
    tar --warning=no-file-changed -czf $APP_NAME-$VERSION.tar.gz -C "$TMP_DIR" "$APP_NAME-$VERSION"
    rm -rf "$TMP_DIR"
else
    echo "Error: Directory $USRSOURCE/usr does not exist."
    exit 1
fi

# Step 3: Copy the .tar.gz to ZIP_DIR
echo "Copying the .tar.gz to ZIP_DIR..."
cp $APP_NAME-$VERSION.tar.gz $ZIP_DIR/

rm $APP_NAME-$VERSION.tar.gz

# Step 4: Copy built executable and other files to RPM build directory
echo "Copying files to RPM build directory..."
cp -a ../../share/applications/arxis-ai-support.desktop $BUILD_DIR/ || echo "No .desktop file found to copy."
cp -a ../../share/pixmaps/arxis.png $BUILD_DIR/ || echo "No image found to copy."
cp -a ../../local/bin/$APP_NAME $BUILD_DIR/ || echo "No local binaries found to copy."
# cp -aR Settings $BUILD_DIR/ || echo "No Data directory found to copy."
cp -a *.py $BUILD_DIR/ || echo "No python files found to copy."

# Also include an env.sample for administrators to see how to create a user config
mkdir -p $BUILD_DIR/etc/arxis-ai-support || true
cat > $BUILD_DIR/etc/arxis-ai-support/env.sample <<'_SAMPLE_'
# Example environment file for Arxis AI Support
# Create /etc/arxis-ai-support/env with the line below and set permissions to 600
# OPENAI_API_KEY=your_api_key_here
_SAMPLE_
chmod 0644 $BUILD_DIR/etc/arxis-ai-support/env.sample || true

echo "Building RPM package..."
# Step 5: Build the RPM package
echo "Building RPM package..."
rpmbuild -ba $SPEC_DIR/$APP_NAME.spec

echo "Build completed successfully!"