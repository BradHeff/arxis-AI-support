#!/bin/bash
# Stop script on errors
set -e

APP_NAME="arxis-ai-support"
APP_LIB_DIR="Arxis-AI-Support"

# Define source and build directories
EXEC_DIR=$(pwd)

# Calculate the parent directory two levels up
PARENT_X3_DIR=$(dirname "$(dirname "$(dirname "$EXEC_DIR")")")

# Define source and build directories
SOURCE_DIR=$EXEC_DIR
BUILD_DIR=$HOME/rpmbuild/BUILD/$APP_NAME
SPEC_DIR=$HOME/rpmbuild/SPECS
ZIP_DIR=$HOME/rpmbuild/SOURCES
BASH_SCRIPT="../../local/bin"
USRSOURCE="$PARENT_X3_DIR"
FUNCTIONS="$SOURCE_DIR/Functions.py"
SPEC_FILE="$SPEC_DIR/$APP_NAME.spec"

if [ ! -f "$SPEC_FILE" ]; then
    echo "Error: Spec file not found at $SPEC_FILE"
    exit 1
fi

# Read the current version
CURRENT_VERSION=$(grep -E '^Version:[[:space:]]*' "$SPEC_FILE" | awk '{print $2}')
if [ -z "$CURRENT_VERSION" ]; then
    echo "Error: Unable to find Version in spec file"
    exit 1
fi

# Ensure build directory exists
mkdir -p $BUILD_DIR

# Step 1: Update DEBUG variable in the Bash script
echo "Setting DEBUG to false in the Bash script..."
sed -i 's/^DEBUG=true/DEBUG=false/' $BASH_SCRIPT/$APP_NAME


# Increment the version
IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
MAJOR=${VERSION_PARTS[0]}
MINOR=${VERSION_PARTS[1]}
PATCH=$((VERSION_PARTS[2] + 1))
NEW_VERSION="$MAJOR.$MINOR.$PATCH"

# Update the version in the spec file
sed -i "s/^Version:.*$/Version: $NEW_VERSION/" "$SPEC_FILE"

echo "Version updated from $CURRENT_VERSION to $NEW_VERSION"

# Update version number in Functions.py
echo "Updating version number in Functions.py..."
sed -i "s/^Version[[:space:]]*=[[:space:]]*\".*\"/Version = \"$NEW_VERSION\"/" "$FUNCTIONS"

echo "Version updated to $NEW_VERSION in Functions.py"

# Extract the version number from the .spec file to confirm
VERSION=$(grep -E '^Version:[[:space:]]*' $SPEC_DIR/$APP_NAME.spec | awk '{print $2}')
echo "Confirmed version in spec file: $VERSION"

# Extract the version number from Functions.py to confirm
FUNC_VERSION=$(grep -E '^Version[[:space:]]*=' "$FUNCTIONS" | cut -d'"' -f2)
echo "Confirmed version in Functions.py: $FUNC_VERSION"

# Step 2: Compress the PROJECT-ROOT/usr directory
echo "Compressing the $USRSOURCE/usr directory..."
if [ -d "$USRSOURCE/usr" ]; then
    # Sync to ensure all pending disk writes are completed
    sync

    # Create a temporary copy of the directory
    TMP_DIR=$(mktemp -d)
    cp -R "$USRSOURCE/usr" "$TMP_DIR/"

    # Use the temporary copy for tarring, with the --warning=no-file-changed option
    tar --warning=no-file-changed -czf $APP_NAME-$VERSION.tar.gz -C "$TMP_DIR" usr

    # Remove the temporary directory
    rm -rf "$TMP_DIR"
else
    echo "Error: Directory $USRSOURCE/usr does not exist."
    exit 1
fi

# Step 3: Copy the .tar.gz to ZIP_DIR
echo "Copying the .tar.gz to ZIP_DIR..."
cp $APP_NAME-$VERSION.tar.gz $ZIP_DIR/

rm $APP_NAME-$VERSION.tar.gz

# Step 4: Copy built executable and other files to RPM build directory
echo "Copying files to RPM build directory..."
cp -a ../../share/applications/arxis-ai-support.desktop $BUILD_DIR/ || echo "No .desktop file found to copy."
cp -a ../../share/pixmaps/arxis.png $BUILD_DIR/ || echo "No image found to copy."
cp -a ../../local/bin/$APP_NAME $BUILD_DIR/ || echo "No local binaries found to copy."
# cp -aR Settings $BUILD_DIR/ || echo "No Data directory found to copy."
cp -a *.py $BUILD_DIR/ || echo "No python files found to copy."

# Step 5: Build the RPM package
echo "Building RPM package..."
rpmbuild -ba $SPEC_DIR/$APP_NAME.spec

echo "Build completed successfully!"